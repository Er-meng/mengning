<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>cn.mn.mn</groupId>
    <artifactId>cloud-parent</artifactId>
    <version>1.0.0</version>
    <!-- pom:父类型都为pom类型;jar:内部调用或者是作服务使用;war:需要部署的项目 -->
    <packaging>pom</packaging>
    <name>cloud-parent</name>
    <description>MN Cloud Project</description>

    <!-- 包含子模块 -->
    <modules>
        <module>cloud-common</module>
        <module>cloud-eureka</module>
        <module>cloud-gateway</module>
        <module>cloud-model</module>
        <module>microservice-base</module>
        <module>microservice-job</module>
    </modules>

    <properties>
        <!-- 整个项目的编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 文件拷贝时的编码 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>

        <!-- 依赖库版本 -->
        <java.version>1.8</java.version>
        <junit.version>4.11</junit.version>
        <spring-cloud.version>Hoxton.SR4</spring-cloud.version>
        <mysql.version>8.0.18</mysql.version>
        <mybatis.version>2.1.1</mybatis.version>
        <mybatis-generator.version>1.3.5</mybatis-generator.version>
        <tk-mybatis.version>2.1.5</tk-mybatis.version>
        <tk-mapper.version>3.4.6</tk-mapper.version>
        <spring-kafka.version>2.4.0.RELEASE</spring-kafka.version>
        <commons-net.version>3.6</commons-net.version>
        <httpcomponents.version>4.5.6</httpcomponents.version>
        <netty.version>4.1.31.Final</netty.version>
        <slf4j.version>1.7.25</slf4j.version>
        <fastjson.version>1.2.47</fastjson.version>
        <surefire-plugin.version>2.5</surefire-plugin.version>
        <druid.version>1.1.1</druid.version>
        <pagehelper.version>1.2.3</pagehelper.version>
        <swagger.version>2.7.0</swagger.version>
        <websocket.version>0.8.0</websocket.version>
        <jackson.version>2.10.1</jackson.version>
        <jjwt.version>0.9.1</jjwt.version>
        <jaxb.version>2.3.1</jaxb.version>
        <dingtalk.version>1.0.0-SNAPSHOT</dingtalk.version>
        <commons-beanutils.version>1.9.4</commons-beanutils.version>
        <easypoi-base.version>4.2.0</easypoi-base.version>
        <easypoi-annotation.version>4.2.0</easypoi-annotation.version>
        <jxls.version>2.8.1</jxls.version>
        <jxls-poi.version>2.8.1</jxls-poi.version>
        <jsoup.version>1.11.3</jsoup.version>
        <zxing-core.version>3.3.0</zxing-core.version>
        <zxing-javase.version>3.3.0</zxing-javase.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <!-- compile：默认的scope，表示 dependency 都可以在生命周期中使用。而且，这些dependencies 会传递到依赖的项目中。适用于所有阶段，会随着项目一起发布。
                 provided：跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet AP和一些Java EE APIs。这个scope 只能作用在编译和测试时，同时没有传递性。
                 runtime：表示dependency不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段。
                 test：表示depe/dingtalk.version>
        <commons-beanutils.version>1.9.4ndency作用在测试时，不作用在运行时。 只在测试时使用，用于编译和运行测试代码。不会随项目发布。
                 system：跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。-->
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>
